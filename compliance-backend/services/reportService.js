const fs = require('fs');
const path = require('path');
const pdf = require('html-pdf');
const pug = require('pug');
const moment = require('moment');
const { v4: uuidv4 } = require('uuid');
const Framework = require('../models/Framework');
const Control = require('../models/Control');
const User = require('../models/User');

exports.generateComplianceReport = async (framework, evidences, user) => {
  // 1. Calcul complet des statistiques
  let implemented = 0;
  let compliant = 0;
  let partial = 0;
  let notImplemented = 0;
  let notApplicable = 0;

  const controls = framework.controls || await Control.find({ frameworkId: framework._id });

  controls.forEach(control => {
    const evidence = evidences.find(e => e.controlId.equals(control._id));
    if (evidence) {
      switch (evidence.status) {
        case 'implemented':
          implemented++;
          compliant++;
          break;
        case 'compliant':
          compliant++;
          break;
        case 'partial':
          partial++;
          break;
        case 'not_applicable':
          notApplicable++;
          break;
        default:
          notImplemented++;
      }
    } else {
      notImplemented++;
    }
  });

  const totalControls = controls.length;
  const complianceScore = Math.round((compliant / (totalControls - notApplicable)) * 100) || 0;
  const implementationRate = Math.round((implemented / (totalControls - notApplicable)) * 100) || 0;

  // 2. Construction des donn√©es du rapport
  const reportData = {
    frameworkName: framework.name,
    frameworkVersion: framework.version || '1.0',
    userName: `${user.firstName} ${user.lastName}`,
    userPosition: user.position || 'Responsable Conformit√©',
    company: user.company || 'Notre Organisation',
    reportDate: moment().format('LL'),
    generatedAt: moment().format('LLLL'),
    
    // M√©triques compl√®tes
    totalControls,
    implemented,
    compliant,
    partial,
    notImplemented,
    notApplicable,
    complianceScore,
    implementationRate,

    // D√©tails des contr√¥les
    controls: controls.map(control => {
      const evidence = evidences.find(e => e.controlId.equals(control._id));
      return {
        id: control.controlId,
        reference: control.reference || 'N/A',
        title: control.title,
        description: control.description || '',
        category: control.category,
        subCategory: control.subCategory || 'Non class√©', // SubCategory inclus
        status: evidence ? evidence.status : 'not_implemented',
        maturityLevel: evidence ? evidence.maturityLevel : 0, // MaturityLevel inclus
        evidence: evidence ? evidence.description : 'Aucune preuve fournie',
        comment: evidence ? evidence.comment : '',
        lastUpdated: evidence ? moment(evidence.updatedAt).format('LL') : 'Jamais'
      };
    }),

    // Recommandations g√©n√©r√©es
    recommendations: this.generateRecommendations(complianceScore, framework)
  };

  // 3. G√©n√©ration du contenu HTML
  const htmlContent = pug.renderFile(
    path.join(__dirname, '../views/report/report.pug'),
    { data: reportData }
  );

  // 4. Configuration des dossiers
  const reportsDir = path.join(__dirname, '../uploads/reports');
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }

  // 5. G√©n√©ration des fichiers
  const baseFilename = `compliance_${framework.name.replace(/\s+/g, '_')}_${moment().format('YYYYMMDD-HHmmss')}_${uuidv4().substr(0, 6)}`;
  
  // Fichier HTML
  const htmlFilePath = path.join('uploads/reports', `${baseFilename}.html`);
  fs.writeFileSync(path.join(__dirname, '../', htmlFilePath), htmlContent);

  // Fichier PDF
  const pdfFilePath = path.join('uploads/reports', `${baseFilename}.pdf`);
  const fullPdfPath = path.join(__dirname, '../', pdfFilePath);

  const pdfOptions = {
    format: 'A4',
    orientation: 'portrait',
    border: {
      top: '15mm',
      right: '10mm',
      bottom: '15mm',
      left: '10mm'
    },
    header: {
      height: '10mm',
      contents: `<div style="text-align:center;border-bottom:1px solid #eee;padding-bottom:5px;">
        Rapport de Conformit√© ${framework.name}
      </div>`
    },
    footer: {
      height: '10mm',
      contents: `<div style="text-align:center;color:#666;font-size:10px;">
        Page {{page}}/{{pages}} | G√©n√©r√© le ${moment().format('LL')}
      </div>`
    },
    timeout: 30000
  };

  await new Promise((resolve, reject) => {
    pdf.create(htmlContent, pdfOptions).toFile(fullPdfPath, (err) => {
      if (err) {
        console.error('Erreur g√©n√©ration PDF:', err);
        return reject(new Error('√âchec de la g√©n√©ration PDF'));
      }
      resolve();
    });
  });

  // 6. Retour des r√©sultats
  return {
    reportData,      // Toutes les donn√©es analytiques
    files: {         // Chemins d'acc√®s aux fichiers
      html: htmlFilePath,
      pdf: pdfFilePath
    },
    metadata: {      // M√©tadonn√©es techniques
      generatedAt: new Date(),
      processTime: `${moment().diff(startTime, 'seconds')}s`,
      formatVersion: '1.2'
    }
  };
};

exports.generateRecommendations = (score, framework) => {
  const recommendations = [];
  
  // Bas√© sur le score
  if (score < 50) {
    recommendations.push('üö® Action imm√©diate requise - Niveau de conformit√© critique');
    recommendations.push('üîç Audit complet recommand√©');
  } else if (score < 70) {
    recommendations.push('‚ö†Ô∏è Prioriser les contr√¥les non conformes');
    recommendations.push('üë®‚Äçüíª Former les √©quipes sur les exigences');
  }

  // Sp√©cifiques au framework
  if (/ISO\s*27001/i.test(framework.name)) {
    recommendations.push('üèÖ Envisager la certification ISO 27001');
    recommendations.push('üìÖ Mettre en place des revues de s√©curit√© trimestrielles');
  }
  
  if (/GDPR|RGPD/i.test(framework.name)) {
    recommendations.push('üîê Auditer les processus de donn√©es personnelles');
    recommendations.push('üë• Former le personnel sur la protection des donn√©es');
  }

  if (/NIST/i.test(framework.name)) {
    recommendations.push('üìä Adapter les contr√¥les aux niveaux de risque');
    recommendations.push('üõ°Ô∏è Impl√©menter un syst√®me de gestion des risques');
  }

  return recommendations;
};